package com.github.aoc

import scala.collection.mutable.ListBuffer

object Day21 {
  
  val ex = """../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#"""
  
  val data = """../.. => .##/##./.#.
#./.. => .#./#.#/##.
##/.. => #.#/#.#/###
.#/#. => #../.#./.#.
##/#. => ##./#.#/..#
##/## => #.#/#.#/...
.../.../... => ..##/##../##../#.#.
#../.../... => ##.#/..#./#.#./.#..
.#./.../... => ..#./##.#/#.##/###.
##./.../... => ###./##.#/.###/#.#.
#.#/.../... => ##../#..#/.###/#.#.
###/.../... => ...#/#..#/...#/...#
.#./#../... => ...#/.##./#.##/..#.
##./#../... => .##./.#../.##./.#..
..#/#../... => ####/.#../#.#./.###
#.#/#../... => ###./.#../##../....
.##/#../... => ##../#.#./#.#./##..
###/#../... => #.##/#..#/.#../##..
.../.#./... => .#.#/.###/.##./##..
#../.#./... => .###/.##./..##/..##
.#./.#./... => .##./.#.#/#.##/.###
##./.#./... => ..#./..../..#./###.
#.#/.#./... => ..../..#./..##/##..
###/.#./... => .#.#/#..#/.###/#..#
.#./##./... => ..../..#./.#../####
##./##./... => ..##/#.##/..#./#.##
..#/##./... => ..../#.##/.##./####
#.#/##./... => ..##/#.#./.#../.##.
.##/##./... => #.../...#/###./....
###/##./... => .#../#.#./#.##/....
.../#.#/... => #.#./####/#.../..#.
#../#.#/... => ...#/.#.#/###./.#.#
.#./#.#/... => #..#/#.../###./#.##
##./#.#/... => .##./#.../...#/#.##
#.#/#.#/... => #..#/##../##../.#..
###/#.#/... => #.#./...#/.#.#/.##.
.../###/... => .#.#/.##./..#./.#..
#../###/... => .###/..##/#.##/.#..
.#./###/... => #.../#.../.#../#...
##./###/... => .###/...#/.#.#/.#..
#.#/###/... => .#../..##/#..#/#...
###/###/... => .###/##../##.#/#.#.
..#/.../#.. => ##.#/..../...#/..##
#.#/.../#.. => .#.#/###./...#/.#.#
.##/.../#.. => ##.#/.#../####/#.##
###/.../#.. => #.../#..#/###./....
.##/#../#.. => #..#/..#./####/...#
###/#../#.. => ####/###./##.#/....
..#/.#./#.. => .##./.##./##../#..#
#.#/.#./#.. => #..#/#..#/#.../.#..
.##/.#./#.. => ##../##.#/#.##/..##
###/.#./#.. => #.##/..##/.##./#.#.
.##/##./#.. => #.##/..../##../....
###/##./#.. => ###./.#.#/.###/.#..
#../..#/#.. => .###/#.##/..#./.##.
.#./..#/#.. => #..#/..##/.#.#/##..
##./..#/#.. => ###./#.../..##/##..
#.#/..#/#.. => #.../.##./.###/###.
.##/..#/#.. => ...#/##.#/..#./...#
###/..#/#.. => ###./..#./.#../...#
#../#.#/#.. => #..#/...#/..#./.#.#
.#./#.#/#.. => #..#/##.#/####/.##.
##./#.#/#.. => .###/##../..../.#..
..#/#.#/#.. => ..#./##.#/####/###.
#.#/#.#/#.. => #.#./#.##/##.#/.###
.##/#.#/#.. => ..#./####/##../.###
###/#.#/#.. => .#.#/###./.#.#/#...
#../.##/#.. => .###/..##/.#.#/..#.
.#./.##/#.. => #.##/.#../.###/#.#.
##./.##/#.. => .###/#.../#.../..#.
#.#/.##/#.. => ##../...#/..#./...#
.##/.##/#.. => ..##/.#.#/...#/####
###/.##/#.. => ##../.###/##../###.
#../###/#.. => ###./#..#/#.#./....
.#./###/#.. => ..../#.#./.###/.###
##./###/#.. => .###/##../#..#/####
..#/###/#.. => ..../#.#./#..#/##..
#.#/###/#.. => .#.#/..##/##.#/#..#
.##/###/#.. => .#../...#/##../.#..
###/###/#.. => #.../.###/###./##.#
.#./#.#/.#. => .#.#/#.##/###./#...
##./#.#/.#. => .#../.#../.#../.#..
#.#/#.#/.#. => ##.#/..../###./.#..
###/#.#/.#. => #.#./##.#/.#.#/##..
.#./###/.#. => ##.#/..#./..#./#.#.
##./###/.#. => ####/.###/.#.#/.##.
#.#/###/.#. => .#../.###/##../#.#.
###/###/.#. => #.../.##./..##/####
#.#/..#/##. => ..../..#./##../...#
###/..#/##. => .###/..#./#.##/###.
.##/#.#/##. => .###/..../#.#./...#
###/#.#/##. => ###./...#/.###/####
#.#/.##/##. => #.##/#.../..../...#
###/.##/##. => #.../#.../#..#/...#
.##/###/##. => .#../###./.###/..#.
###/###/##. => ##.#/.#../###./.#..
#.#/.../#.# => #.#./#.#./..../...#
###/.../#.# => ####/###./..../##.#
###/#../#.# => .###/##.#/#.##/..#.
#.#/.#./#.# => ###./.###/#.##/....
###/.#./#.# => .##./###./#.#./##..
###/##./#.# => #.../.#.#/#.##/#..#
#.#/#.#/#.# => ..#./#.#./##../..##
###/#.#/#.# => ..#./.#../...#/.##.
#.#/###/#.# => ..#./###./##.#/####
###/###/#.# => #.../#.#./#..#/.#.#
###/#.#/### => ..##/.##./.#.#/#...
###/###/### => .##./..##/####/###."""
  
  case class Rule( val size : Int, val pattern : String, val output : String )
  
  def main( args : Array[String] ) : Unit = {
    Console.println( "day 21..." )
    
    val lines = Common.toLines( ex )
    
    val rules = lines.map( toRule( _ ) )
    Console.println( rules )
    
    testHFlip()
    testRotate()
    testRotate2()
    testVFlip()
    
    testRotate4()
    testHFlip2()
    testHV()
  }
  
  def toRule( line : String ) : Rule = {
    
    val p1 = line.split("=>")
    
    val pat = p1(0).trim()
    val out = p1(1).trim()
    
    val sp = p1(0).trim().split("/")
    val sz = sp(0).size
    
    Rule( sz, pat, out ) 
    
  }
  
  def hFlip( in : List[String] ) : List[String] = {
    
    val out = ListBuffer[String]()
    
    for( s <- in ){
      out += s.reverse
    }
    
    out.toList
    
  }
  
  def rotate( in : List[String] ) : List[String] = {
    
    val out = ListBuffer[String]()
    
    // get the size
    val sz = in(0).size
    
    for( x <- 0 until sz ){
      var s = ""
      for( y <- sz - 1 to 0 by -1 ){
        s = s + in(y)(x)
        
      }
      out += s
    }
    
    out.toList
    
  }
  
  def testVFlip() : Unit = {
    val in = List( ".#.", "..#", "###" )
    val out = vFlip(in)
    Console.println(out)
  }

  def testHFlip() : Unit = {
    val in = List( ".#.", "..#", "###" )
    val out = hFlip(in)
    Console.println(out)
  }
  
  def testRotate() : Unit = {
    val in = List( ".#.", "..#", "###" )
    val out = rotate(in)
    Console.println(out)
  }

  def testRotate2() : Unit = {
    val in = List( ".#.", "..#", "###" )
    val out = rotate(rotate(in))
    Console.println(out)
  }

  def testRotate4() : Unit = {
    val in = List( ".#.", "..#", "###" )
    Console.println("r4")
    Console.println(in)
    val out = rotate(rotate(rotate(rotate(in))))
    Console.println(out)
  }
  
  def vFlip( in : List[String] ) : List[String] = {
    in.reverse
  }

  def testHFlip2() : Unit = {
    val in = List( ".#.", "..#", "###" )
    Console.println("hf2")
    Console.println(in)
    val out = hFlip(hFlip(in))
    Console.println(out)
  }

  def testHV() : Unit = {
    val in = List( ".#.", "..#", "###" )
    Console.println("hv")
    Console.println(in)
    val out = vFlip(hFlip(in))
    Console.println(out)

    Console.println("vh")
    Console.println(in)
    val o2 = hFlip(vFlip(in))
    Console.println(o2)
  }
  /*
    
.#.   .#.   #..   ###
..#   #..   #.#   ..#
###   ###   ##.   .#.

.##
#.#
..#
 
*/
  
  
}